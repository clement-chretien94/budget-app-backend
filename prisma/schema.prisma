// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  username     String     @unique
  email        String     @unique
  passwordHash String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  budgets      Budget[]
}

model Budget {
  id            Int        @id @default(autoincrement())
  month         Int
  year          Int
  stableIncome Float
  userId        Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions   Transaction[]
  categories    BudgetOnCategory[]

  @@unique([userId, month, year]) // Guaranteed only one budget per month fro each user
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String
  emoji        String
  color        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  budgets      BudgetOnCategory[]
}

model BudgetOnCategory {
  id          Int       @id @default(autoincrement())
  limitAmount Float?
  budget      Budget    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  budgetId    Int
  categoryId  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  transactions Transaction[]

  @@unique([budgetId, categoryId])
}

model Transaction {
  id          Int        @id @default(autoincrement())
  name        String
  type        String     // 'expense' or 'income'
  amount      Float
  date        DateTime   @default(now())
  budgetId    Int
  budgetCategoryId Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  budget      Budget     @relation(fields: [budgetId], references: [id])
  budgetCategory  BudgetOnCategory? @relation(fields: [budgetCategoryId], references: [id])

  // Seule une contrainte au niveau de la base de données peut faire cela.
  // Prisma ne supporte pas les contraintes conditionnelles directement dans le schéma.
  // Il faut ajouter une contrainte CHECK manuellement dans la base SQLite :
  // CHECK (budgetId IS NOT NULL OR type = 'income')
}
